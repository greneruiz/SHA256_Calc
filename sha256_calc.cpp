

#include <iostream>
#include <iomanip>
#include "sha256.h"

int main()
{
	/// Simulating a 55-byte message:
	uint8_t msg1[] = {	0xDC, 0x09, 0x3B, 0xDC, 0xDC, 0xC9, 0x72, 0x4E, 0xB4, 0xB1,
						0x4D, 0x51, 0x17, 0xD2, 0xFA, 0xD4, 0x0C, 0x6A, 0x3C, 0x72,
						0x23, 0xC1, 0xB2, 0xEB, 0xDD, 0x87, 0x68, 0x4C, 0x41, 0xD0,
						0x27, 0xA8, 0x5D, 0x87, 0x6F, 0x41, 0x88, 0x20, 0x44, 0x37,
						0x98, 0xFA, 0x75, 0x5A, 0x2E, 0x44, 0x07, 0x5D, 0x5A, 0x4C,
						0x0A, 0x49, 0x16, 0x01, 0x00 };

	/// Simulating an 88-byte message:
	uint8_t msg2[] = {	0x26, 0x5f, 0x83, 0x18, 0x9d, 0xef, 0xa0, 0x64, 0x09, 0xac,
						0xd1, 0xa9, 0x3f, 0xd1, 0x5b, 0xef, 0x94, 0x2b, 0xd2, 0x2d,
						0x9d, 0x55, 0xec, 0x81, 0x97, 0x1c, 0x25, 0x4c, 0x2c, 0x13,
						0x34, 0x83, 0x77, 0x51, 0xD2, 0xE5, 0xF7, 0x2D, 0xE1, 0x11,
						0xBF, 0x32, 0x26, 0xCF, 0xD8, 0x0D, 0x29, 0xCC, 0x73, 0x17,
						0xB0, 0x9D, 0xE4, 0xCA, 0x3E, 0x92, 0xF0, 0xB7, 0x89, 0xFD,
						0x76, 0x38, 0x11, 0x0D, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE,
						0x00, 0x00, 0x00, 0x00, 0x01, 0x23, 0x00, 0x00 };

	uint8_t *digest = new uint8_t[SHA256_BYTECOUNT];
	if( !sha256( msg1, sizeof( msg1 ), digest ) )
	{
		std::cout << "\nSHA256 calculation failed. Check input message.\n";
		return 0;
	}

	std::cout << "msg1: ";
	for( int i = 0; i < sizeof( msg1 ); i++ )
	{
		std::cout << std::hex << std::setw( 2 ) << std::setfill( '0' ) << static_cast<int>( msg1[i] ) << " ";
	}
	
	std::cout << std::endl << "msg1 digest: ";
	for( int i = 0; i < SHA256_BYTECOUNT; i++ )
	{
		std::cout << std::hex << std::setw( 2 ) << std::setfill( '0' ) << static_cast<int>( digest[i] ) << " ";
	}

	std::cout << std::endl;
	delete[] digest;


	digest = new uint8_t[SHA256_BYTECOUNT];
	if( !sha256( msg2, sizeof( msg2 ), digest ) )
	{
		std::cout << "\nSHA256 calculation failed. Check input message.\n";
		return 0;
	}

	std::cout << "msg2: ";
	for( int i = 0; i < sizeof( msg2 ); i++ )
	{
		std::cout << std::hex << std::setw( 2 ) << std::setfill( '0' ) << static_cast<int>( msg2[i] ) << " ";
	}

	std::cout << std::endl << "msg2 digest: ";
	for( int i = 0; i < SHA256_BYTECOUNT; i++ )
	{
		std::cout << std::hex << std::setw( 2 ) << std::setfill( '0' ) << static_cast<int>( digest[i] ) << " ";
	}

	std::cout << std::endl;
	delete[] digest;



	return 0;
}
